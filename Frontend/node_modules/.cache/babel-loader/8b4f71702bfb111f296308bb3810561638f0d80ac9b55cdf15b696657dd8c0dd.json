{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n\n// Async thunk for login\nexport const loginUser = createAsyncThunk(\"auth/loginUser\", async ({\n  email,\n  password\n}, {\n  rejectWithValue\n}) => {\n  try {\n    // Mock API (replace with real API call later)\n    if (email === \"test@example.com\" && password === \"123456\") {\n      return {\n        id: \"1\",\n        email,\n        name: \"Test User\",\n        token: \"mock-jwt-token\"\n      };\n    } else {\n      return rejectWithValue(\"Invalid email or password\");\n    }\n  } catch (error) {\n    return rejectWithValue(\"Something went wrong\");\n  }\n});\nconst authSlice = createSlice({\n  name: \"auth\",\n  initialState: {\n    user: null,\n    loading: false,\n    error: null\n  },\n  reducers: {\n    logout: state => {\n      state.user = null;\n      state.error = null;\n      localStorage.removeItem(\"authToken\");\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(loginUser.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(loginUser.fulfilled, (state, action) => {\n      state.loading = false;\n      state.user = action.payload;\n      localStorage.setItem(\"authToken\", action.payload.token);\n    }).addCase(loginUser.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    });\n  }\n});\nexport const {\n  logout\n} = authSlice.actions;\nexport default authSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","loginUser","email","password","rejectWithValue","id","name","token","error","authSlice","initialState","user","loading","reducers","logout","state","localStorage","removeItem","extraReducers","builder","addCase","pending","fulfilled","action","payload","setItem","rejected","actions","reducer"],"sources":["C:/Users/saipa/task-manager/src/redux/authSlice.jsx"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\n\r\n// Async thunk for login\r\nexport const loginUser = createAsyncThunk(\r\n  \"auth/loginUser\",\r\n  async ({ email, password }, { rejectWithValue }) => {\r\n    try {\r\n      // Mock API (replace with real API call later)\r\n      if (email === \"test@example.com\" && password === \"123456\") {\r\n        return {\r\n          id: \"1\",\r\n          email,\r\n          name: \"Test User\",\r\n          token: \"mock-jwt-token\",\r\n        };\r\n      } else {\r\n        return rejectWithValue(\"Invalid email or password\");\r\n      }\r\n    } catch (error) {\r\n      return rejectWithValue(\"Something went wrong\");\r\n    }\r\n  }\r\n);\r\n\r\nconst authSlice = createSlice({\r\n  name: \"auth\",\r\n  initialState: {\r\n    user: null,\r\n    loading: false,\r\n    error: null,\r\n  },\r\n  reducers: {\r\n    logout: (state) => {\r\n      state.user = null;\r\n      state.error = null;\r\n      localStorage.removeItem(\"authToken\");\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(loginUser.pending, (state) => {\r\n        state.loading = true;\r\n        state.error = null;\r\n      })\r\n      .addCase(loginUser.fulfilled, (state, action) => {\r\n        state.loading = false;\r\n        state.user = action.payload;\r\n        localStorage.setItem(\"authToken\", action.payload.token);\r\n      })\r\n      .addCase(loginUser.rejected, (state, action) => {\r\n        state.loading = false;\r\n        state.error = action.payload;\r\n      });\r\n  },\r\n});\r\n\r\nexport const { logout } = authSlice.actions;\r\nexport default authSlice.reducer;"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;;AAEhE;AACA,OAAO,MAAMC,SAAS,GAAGD,gBAAgB,CACvC,gBAAgB,EAChB,OAAO;EAAEE,KAAK;EAAEC;AAAS,CAAC,EAAE;EAAEC;AAAgB,CAAC,KAAK;EAClD,IAAI;IACF;IACA,IAAIF,KAAK,KAAK,kBAAkB,IAAIC,QAAQ,KAAK,QAAQ,EAAE;MACzD,OAAO;QACLE,EAAE,EAAE,GAAG;QACPH,KAAK;QACLI,IAAI,EAAE,WAAW;QACjBC,KAAK,EAAE;MACT,CAAC;IACH,CAAC,MAAM;MACL,OAAOH,eAAe,CAAC,2BAA2B,CAAC;IACrD;EACF,CAAC,CAAC,OAAOI,KAAK,EAAE;IACd,OAAOJ,eAAe,CAAC,sBAAsB,CAAC;EAChD;AACF,CACF,CAAC;AAED,MAAMK,SAAS,GAAGV,WAAW,CAAC;EAC5BO,IAAI,EAAE,MAAM;EACZI,YAAY,EAAE;IACZC,IAAI,EAAE,IAAI;IACVC,OAAO,EAAE,KAAK;IACdJ,KAAK,EAAE;EACT,CAAC;EACDK,QAAQ,EAAE;IACRC,MAAM,EAAGC,KAAK,IAAK;MACjBA,KAAK,CAACJ,IAAI,GAAG,IAAI;MACjBI,KAAK,CAACP,KAAK,GAAG,IAAI;MAClBQ,YAAY,CAACC,UAAU,CAAC,WAAW,CAAC;IACtC;EACF,CAAC;EACDC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACnB,SAAS,CAACoB,OAAO,EAAGN,KAAK,IAAK;MACrCA,KAAK,CAACH,OAAO,GAAG,IAAI;MACpBG,KAAK,CAACP,KAAK,GAAG,IAAI;IACpB,CAAC,CAAC,CACDY,OAAO,CAACnB,SAAS,CAACqB,SAAS,EAAE,CAACP,KAAK,EAAEQ,MAAM,KAAK;MAC/CR,KAAK,CAACH,OAAO,GAAG,KAAK;MACrBG,KAAK,CAACJ,IAAI,GAAGY,MAAM,CAACC,OAAO;MAC3BR,YAAY,CAACS,OAAO,CAAC,WAAW,EAAEF,MAAM,CAACC,OAAO,CAACjB,KAAK,CAAC;IACzD,CAAC,CAAC,CACDa,OAAO,CAACnB,SAAS,CAACyB,QAAQ,EAAE,CAACX,KAAK,EAAEQ,MAAM,KAAK;MAC9CR,KAAK,CAACH,OAAO,GAAG,KAAK;MACrBG,KAAK,CAACP,KAAK,GAAGe,MAAM,CAACC,OAAO;IAC9B,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEV;AAAO,CAAC,GAAGL,SAAS,CAACkB,OAAO;AAC3C,eAAelB,SAAS,CAACmB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}