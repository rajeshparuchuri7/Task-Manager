{"ast":null,"code":"// import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n\n// // Async thunk for login\n// export const loginUser = createAsyncThunk(\n//   \"auth/loginUser\",\n//   async ({ email, password }, { rejectWithValue }) => {\n//     try {\n//       // Mock API (replace with real API call later)\n//       if (email === \"test@example.com\" && password === \"123456\") {\n//         return {\n//           id: \"1\",\n//           email,\n//           name: \"Test User\",\n//           token: \"mock-jwt-token\",\n//         };\n//       } else {\n//         return rejectWithValue(\"Invalid email or password\");\n//       }\n//     } catch (error) {\n//       return rejectWithValue(\"Something went wrong\");\n//     }\n//   }\n// );\n\n// const authSlice = createSlice({\n//   name: \"auth\",\n//   initialState: {\n//     user: null,\n//     loading: false,\n//     error: null,\n//   },\n//   reducers: {\n//     logout: (state) => {\n//       state.user = null;\n//       state.error = null;\n//       localStorage.removeItem(\"authToken\");\n//     },\n//   },\n//   extraReducers: (builder) => {\n//     builder\n//       .addCase(loginUser.pending, (state) => {\n//         state.loading = true;\n//         state.error = null;\n//       })\n//       .addCase(loginUser.fulfilled, (state, action) => {\n//         state.loading = false;\n//         state.user = action.payload;\n//         localStorage.setItem(\"authToken\", action.payload.token);\n//       })\n//       .addCase(loginUser.rejected, (state, action) => {\n//         state.loading = false;\n//         state.error = action.payload;\n//       });\n//   },\n// });\n\n// export const { logout } = authSlice.actions;\n// export default authSlice.reducer;","map":{"version":3,"names":[],"sources":["C:/Users/saipa/task-manager/src/redux/authSlice.jsx"],"sourcesContent":["// import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\n\r\n// // Async thunk for login\r\n// export const loginUser = createAsyncThunk(\r\n//   \"auth/loginUser\",\r\n//   async ({ email, password }, { rejectWithValue }) => {\r\n//     try {\r\n//       // Mock API (replace with real API call later)\r\n//       if (email === \"test@example.com\" && password === \"123456\") {\r\n//         return {\r\n//           id: \"1\",\r\n//           email,\r\n//           name: \"Test User\",\r\n//           token: \"mock-jwt-token\",\r\n//         };\r\n//       } else {\r\n//         return rejectWithValue(\"Invalid email or password\");\r\n//       }\r\n//     } catch (error) {\r\n//       return rejectWithValue(\"Something went wrong\");\r\n//     }\r\n//   }\r\n// );\r\n\r\n// const authSlice = createSlice({\r\n//   name: \"auth\",\r\n//   initialState: {\r\n//     user: null,\r\n//     loading: false,\r\n//     error: null,\r\n//   },\r\n//   reducers: {\r\n//     logout: (state) => {\r\n//       state.user = null;\r\n//       state.error = null;\r\n//       localStorage.removeItem(\"authToken\");\r\n//     },\r\n//   },\r\n//   extraReducers: (builder) => {\r\n//     builder\r\n//       .addCase(loginUser.pending, (state) => {\r\n//         state.loading = true;\r\n//         state.error = null;\r\n//       })\r\n//       .addCase(loginUser.fulfilled, (state, action) => {\r\n//         state.loading = false;\r\n//         state.user = action.payload;\r\n//         localStorage.setItem(\"authToken\", action.payload.token);\r\n//       })\r\n//       .addCase(loginUser.rejected, (state, action) => {\r\n//         state.loading = false;\r\n//         state.error = action.payload;\r\n//       });\r\n//   },\r\n// });\r\n\r\n// export const { logout } = authSlice.actions;\r\n// export default authSlice.reducer;"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}