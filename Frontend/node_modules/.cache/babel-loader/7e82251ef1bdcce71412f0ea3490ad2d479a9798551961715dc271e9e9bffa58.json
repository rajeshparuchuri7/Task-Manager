{"ast":null,"code":"// import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n\n// // Async thunk for login\n// export const loginUser = createAsyncThunk(\n//   \"auth/loginUser\",\n//   async ({ email, password }, { rejectWithValue }) => {\n//     try {\n//       // Mock API (replace with real API call later)\n//       if (email === \"test@example.com\" && password === \"123456\") {\n//         return {\n//           id: \"1\",\n//           email,\n//           name: \"Test User\",\n//           token: \"mock-jwt-token\",\n//         };\n//       } else {\n//         return rejectWithValue(\"Invalid email or password\");\n//       }\n//     } catch (error) {\n//       return rejectWithValue(\"Something went wrong\");\n//     }\n//   }\n// );\n\n// const authSlice = createSlice({\n//   name: \"auth\",\n//   initialState: {\n//     user: null,\n//     loading: false,\n//     error: null,\n//   },\n//   reducers: {\n//     logout: (state) => {\n//       state.user = null;\n//       state.error = null;\n//       localStorage.removeItem(\"authToken\");\n//     },\n//   },\n//   extraReducers: (builder) => {\n//     builder\n//       .addCase(loginUser.pending, (state) => {\n//         state.loading = true;\n//         state.error = null;\n//       })\n//       .addCase(loginUser.fulfilled, (state, action) => {\n//         state.loading = false;\n//         state.user = action.payload;\n//         localStorage.setItem(\"authToken\", action.payload.token);\n//       })\n//       .addCase(loginUser.rejected, (state, action) => {\n//         state.loading = false;\n//         state.error = action.payload;\n//       });\n//   },\n// });\n\n// export const { logout } = authSlice.actions;\n// export default authSlice.reducer;\n\n// src/redux/authSlice.js\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\n// Login async thunk\nexport const loginUser = createAsyncThunk('auth/loginUser', async ({\n  email,\n  password\n}) => {\n  // Fake API call\n  if (email === 'test@test.com' && password === '123456') {\n    return {\n      email,\n      token: 'fake-jwt-token'\n    };\n  }\n  throw new Error('Invalid credentials');\n});\n\n// Signup async thunk\nexport const signupUser = createAsyncThunk('auth/signupUser', async ({\n  name,\n  email,\n  password\n}) => {\n  // Fake API call\n  return {\n    name,\n    email,\n    token: 'fake-jwt-token'\n  };\n});\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState: {\n    user: null,\n    loading: false,\n    error: null\n  },\n  reducers: {\n    logout: state => {\n      state.user = null;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(loginUser.pending, state => {\n      state.loading = true;\n    }).addCase(loginUser.fulfilled, (state, action) => {\n      state.loading = false;\n      state.user = action.payload;\n    }).addCase(loginUser.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.error.message;\n    }).addCase(signupUser.pending, state => {\n      state.loading = true;\n    }).addCase(signupUser.fulfilled, (state, action) => {\n      state.loading = false;\n      state.user = action.payload;\n    }).addCase(signupUser.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.error.message;\n    });\n  }\n});\nexport const {\n  logout\n} = authSlice.actions;\nexport default authSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","loginUser","email","password","token","Error","signupUser","name","authSlice","initialState","user","loading","error","reducers","logout","state","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","message","actions","reducer"],"sources":["C:/Users/saipa/task-manager/src/redux/authSlice.jsx"],"sourcesContent":["// import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\n\r\n// // Async thunk for login\r\n// export const loginUser = createAsyncThunk(\r\n//   \"auth/loginUser\",\r\n//   async ({ email, password }, { rejectWithValue }) => {\r\n//     try {\r\n//       // Mock API (replace with real API call later)\r\n//       if (email === \"test@example.com\" && password === \"123456\") {\r\n//         return {\r\n//           id: \"1\",\r\n//           email,\r\n//           name: \"Test User\",\r\n//           token: \"mock-jwt-token\",\r\n//         };\r\n//       } else {\r\n//         return rejectWithValue(\"Invalid email or password\");\r\n//       }\r\n//     } catch (error) {\r\n//       return rejectWithValue(\"Something went wrong\");\r\n//     }\r\n//   }\r\n// );\r\n\r\n// const authSlice = createSlice({\r\n//   name: \"auth\",\r\n//   initialState: {\r\n//     user: null,\r\n//     loading: false,\r\n//     error: null,\r\n//   },\r\n//   reducers: {\r\n//     logout: (state) => {\r\n//       state.user = null;\r\n//       state.error = null;\r\n//       localStorage.removeItem(\"authToken\");\r\n//     },\r\n//   },\r\n//   extraReducers: (builder) => {\r\n//     builder\r\n//       .addCase(loginUser.pending, (state) => {\r\n//         state.loading = true;\r\n//         state.error = null;\r\n//       })\r\n//       .addCase(loginUser.fulfilled, (state, action) => {\r\n//         state.loading = false;\r\n//         state.user = action.payload;\r\n//         localStorage.setItem(\"authToken\", action.payload.token);\r\n//       })\r\n//       .addCase(loginUser.rejected, (state, action) => {\r\n//         state.loading = false;\r\n//         state.error = action.payload;\r\n//       });\r\n//   },\r\n// });\r\n\r\n// export const { logout } = authSlice.actions;\r\n// export default authSlice.reducer;\r\n\r\n// src/redux/authSlice.js\r\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\n\r\n// Login async thunk\r\nexport const loginUser = createAsyncThunk(\r\n  'auth/loginUser',\r\n  async ({ email, password }) => {\r\n    // Fake API call\r\n    if (email === 'test@test.com' && password === '123456') {\r\n      return { email, token: 'fake-jwt-token' };\r\n    }\r\n    throw new Error('Invalid credentials');\r\n  }\r\n);\r\n\r\n// Signup async thunk\r\nexport const signupUser = createAsyncThunk(\r\n  'auth/signupUser',\r\n  async ({ name, email, password }) => {\r\n    // Fake API call\r\n    return { name, email, token: 'fake-jwt-token' };\r\n  }\r\n);\r\n\r\nconst authSlice = createSlice({\r\n  name: 'auth',\r\n  initialState: { user: null, loading: false, error: null },\r\n  reducers: {\r\n    logout: (state) => {\r\n      state.user = null;\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(loginUser.pending, (state) => { state.loading = true; })\r\n      .addCase(loginUser.fulfilled, (state, action) => {\r\n        state.loading = false;\r\n        state.user = action.payload;\r\n      })\r\n      .addCase(loginUser.rejected, (state, action) => {\r\n        state.loading = false;\r\n        state.error = action.error.message;\r\n      })\r\n      .addCase(signupUser.pending, (state) => { state.loading = true; })\r\n      .addCase(signupUser.fulfilled, (state, action) => {\r\n        state.loading = false;\r\n        state.user = action.payload;\r\n      })\r\n      .addCase(signupUser.rejected, (state, action) => {\r\n        state.loading = false;\r\n        state.error = action.error.message;\r\n      });\r\n  },\r\n});\r\n\r\nexport const { logout } = authSlice.actions;\r\nexport default authSlice.reducer;\r\n\r\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;;AAEhE;AACA,OAAO,MAAMC,SAAS,GAAGD,gBAAgB,CACvC,gBAAgB,EAChB,OAAO;EAAEE,KAAK;EAAEC;AAAS,CAAC,KAAK;EAC7B;EACA,IAAID,KAAK,KAAK,eAAe,IAAIC,QAAQ,KAAK,QAAQ,EAAE;IACtD,OAAO;MAAED,KAAK;MAAEE,KAAK,EAAE;IAAiB,CAAC;EAC3C;EACA,MAAM,IAAIC,KAAK,CAAC,qBAAqB,CAAC;AACxC,CACF,CAAC;;AAED;AACA,OAAO,MAAMC,UAAU,GAAGN,gBAAgB,CACxC,iBAAiB,EACjB,OAAO;EAAEO,IAAI;EAAEL,KAAK;EAAEC;AAAS,CAAC,KAAK;EACnC;EACA,OAAO;IAAEI,IAAI;IAAEL,KAAK;IAAEE,KAAK,EAAE;EAAiB,CAAC;AACjD,CACF,CAAC;AAED,MAAMI,SAAS,GAAGT,WAAW,CAAC;EAC5BQ,IAAI,EAAE,MAAM;EACZE,YAAY,EAAE;IAAEC,IAAI,EAAE,IAAI;IAAEC,OAAO,EAAE,KAAK;IAAEC,KAAK,EAAE;EAAK,CAAC;EACzDC,QAAQ,EAAE;IACRC,MAAM,EAAGC,KAAK,IAAK;MACjBA,KAAK,CAACL,IAAI,GAAG,IAAI;IACnB;EACF,CAAC;EACDM,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACjB,SAAS,CAACkB,OAAO,EAAGJ,KAAK,IAAK;MAAEA,KAAK,CAACJ,OAAO,GAAG,IAAI;IAAE,CAAC,CAAC,CAChEO,OAAO,CAACjB,SAAS,CAACmB,SAAS,EAAE,CAACL,KAAK,EAAEM,MAAM,KAAK;MAC/CN,KAAK,CAACJ,OAAO,GAAG,KAAK;MACrBI,KAAK,CAACL,IAAI,GAAGW,MAAM,CAACC,OAAO;IAC7B,CAAC,CAAC,CACDJ,OAAO,CAACjB,SAAS,CAACsB,QAAQ,EAAE,CAACR,KAAK,EAAEM,MAAM,KAAK;MAC9CN,KAAK,CAACJ,OAAO,GAAG,KAAK;MACrBI,KAAK,CAACH,KAAK,GAAGS,MAAM,CAACT,KAAK,CAACY,OAAO;IACpC,CAAC,CAAC,CACDN,OAAO,CAACZ,UAAU,CAACa,OAAO,EAAGJ,KAAK,IAAK;MAAEA,KAAK,CAACJ,OAAO,GAAG,IAAI;IAAE,CAAC,CAAC,CACjEO,OAAO,CAACZ,UAAU,CAACc,SAAS,EAAE,CAACL,KAAK,EAAEM,MAAM,KAAK;MAChDN,KAAK,CAACJ,OAAO,GAAG,KAAK;MACrBI,KAAK,CAACL,IAAI,GAAGW,MAAM,CAACC,OAAO;IAC7B,CAAC,CAAC,CACDJ,OAAO,CAACZ,UAAU,CAACiB,QAAQ,EAAE,CAACR,KAAK,EAAEM,MAAM,KAAK;MAC/CN,KAAK,CAACJ,OAAO,GAAG,KAAK;MACrBI,KAAK,CAACH,KAAK,GAAGS,MAAM,CAACT,KAAK,CAACY,OAAO;IACpC,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEV;AAAO,CAAC,GAAGN,SAAS,CAACiB,OAAO;AAC3C,eAAejB,SAAS,CAACkB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}