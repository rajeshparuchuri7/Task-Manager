{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\saipa\\\\task-manager\\\\src\\\\context\\\\AuthContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const token = localStorage.getItem('authToken');\n    const userData = localStorage.getItem('authUser');\n    if (token && userData) {\n      try {\n        const parsedUser = JSON.parse(userData);\n        setUser({\n          ...parsedUser,\n          token\n        });\n      } catch (error) {\n        localStorage.removeItem('authToken');\n        localStorage.removeItem('authUser');\n      }\n    }\n    setLoading(false);\n  }, []);\n  const login = async (email, password) => {\n    // Mock login - in real app, this would call your API\n    const mockUser = {\n      id: '1',\n      email,\n      name: email.split('@')[0],\n      token: 'mock-jwt-token'\n    };\n    setUser(mockUser);\n    localStorage.setItem('authToken', mockUser.token);\n    localStorage.setItem('authUser', JSON.stringify({\n      id: mockUser.id,\n      email: mockUser.email,\n      name: mockUser.name\n    }));\n  };\n  const signup = async (email, password, name) => {\n    // Mock signup - in real app, this would call your API\n    const mockUser = {\n      id: Date.now().toString(),\n      email,\n      name,\n      token: 'mock-jwt-token'\n    };\n    setUser(mockUser);\n    localStorage.setItem('authToken', mockUser.token);\n    localStorage.setItem('authUser', JSON.stringify({\n      id: mockUser.id,\n      email: mockUser.email,\n      name: mockUser.name\n    }));\n  };\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('authToken');\n    localStorage.removeItem('authUser');\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      login,\n      signup,\n      logout,\n      loading\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","undefined","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","token","localStorage","getItem","userData","parsedUser","JSON","parse","error","removeItem","login","email","password","mockUser","id","name","split","setItem","stringify","signup","Date","now","toString","logout","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/saipa/task-manager/src/context/AuthContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\nconst AuthContext = createContext(undefined);\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('authToken');\r\n    const userData = localStorage.getItem('authUser');\r\n    \r\n    if (token && userData) {\r\n      try {\r\n        const parsedUser = JSON.parse(userData);\r\n        setUser({ ...parsedUser, token });\r\n      } catch (error) {\r\n        localStorage.removeItem('authToken');\r\n        localStorage.removeItem('authUser');\r\n      }\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  const login = async (email, password) => {\r\n    // Mock login - in real app, this would call your API\r\n    const mockUser = {\r\n      id: '1',\r\n      email,\r\n      name: email.split('@')[0],\r\n      token: 'mock-jwt-token'\r\n    };\r\n    \r\n    setUser(mockUser);\r\n    localStorage.setItem('authToken', mockUser.token);\r\n    localStorage.setItem('authUser', JSON.stringify({\r\n      id: mockUser.id,\r\n      email: mockUser.email,\r\n      name: mockUser.name\r\n    }));\r\n  };\r\n\r\n  const signup = async (email, password, name) => {\r\n    // Mock signup - in real app, this would call your API\r\n    const mockUser = {\r\n      id: Date.now().toString(),\r\n      email,\r\n      name,\r\n      token: 'mock-jwt-token'\r\n    };\r\n    \r\n    setUser(mockUser);\r\n    localStorage.setItem('authToken', mockUser.token);\r\n    localStorage.setItem('authUser', JSON.stringify({\r\n      id: mockUser.id,\r\n      email: mockUser.email,\r\n      name: mockUser.name\r\n    }));\r\n  };\r\n\r\n  const logout = () => {\r\n    setUser(null);\r\n    localStorage.removeItem('authToken');\r\n    localStorage.removeItem('authUser');\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, login, signup, logout, loading }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}